# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT
from colorama import Fore, Style

from less_6.mastermind_engine import think_number, check_number, correct_number, count_players

config = count_players()
print(Style.BRIGHT + Fore.LIGHTYELLOW_EX + "\nС Т А Р Т\n")
think_number()
print(Fore.BLUE + "Загадано четырех значное число\n " + Style.RESET_ALL)

player_1 = 'Игрок - 1'
player_2 = 'Игрок - 2' if config else 'Игрок - 1'
step = player_1
while True:
    color = Style.RESET_ALL + Style.BRIGHT + Fore.GREEN \
        if step == player_1 else Style.RESET_ALL + Style.BRIGHT + Fore.MAGENTA
    number = input(color + '{} Угадайте число: '.format(step))

    while not correct_number(number=number):
        number = input(Style.RESET_ALL + Style.BRIGHT + Fore.RED + 'Введите Верноe число: ' + Style.RESET_ALL)

    result = check_number(number=number)

    if result == 0:
        print(Style.BRIGHT + Fore.LIGHTMAGENTA_EX + '\nВы угадали, победил {}\n'.format(step))
        break
    else:
        print(Style.RESET_ALL + Style.BRIGHT + Fore.LIGHTWHITE_EX + '   Быки - {} Коровы - {}'.format(result['bulls'],
                                                                                                      result['cows']))
        step = player_1 if step == player_2 else player_2
